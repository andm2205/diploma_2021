//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp1.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("WpfApp1.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ALTER PROCEDURE [dbo].[ChangeStateConstraints]
        ///@state BIT
        ///AS
        ///BEGIN
        ///	ALTER TABLE [dbo].[Journal] CHECK CONSTRAINT ALL
        ///	IF @state = 0
        ///	BEGIN
        ///		ALTER TABLE [dbo].[Journal] NOCHECK CONSTRAINT FK_Journal_inUser
        ///		ALTER TABLE [dbo].[Journal] NOCHECK CONSTRAINT FK_Journal_inObject
        ///		ALTER TABLE [dbo].[Journal] NOCHECK CONSTRAINT FK_Journal_inOperation
        ///		ALTER TABLE [dbo].[Journal] NOCHECK CONSTRAINT FK_Journal_inComment
        ///	END
        ///END.
        /// </summary>
        internal static string ChangeStateConstraintsFunc {
            get {
                return ResourceManager.GetString("ChangeStateConstraintsFunc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ALTER PROCEDURE [dbo].[CopyJournal]
        ///@cRow BIGINT
        ///AS
        ///BEGIN
        ///	SET NOEXEC OFF;
        ///
        ///	SELECT TOP(@cRow) * INTO #tempJournal
        ///		FROM [{1}].[dbo].[{2}];
        ///	DECLARE @CURROWC INT;
        ///	SET @CURROWC = @@ROWCOUNT;
        ///	IF @CURROWC = 0
        ///		RETURN @CURROWC;
        ///
        ///	INSERT INTO [dbo].[Operations] (inId)
        ///	SELECT DISTINCT inOperation FROM #tempJournal A
        ///	WHERE NOT EXISTS (
        ///	SELECT TOP (1) B.inId FROM [dbo].[Operations] B WHERE B.inId = A.inOperation)
        ///
        ///	INSERT INTO [dbo].[Objects] (stName)
        ///	SELECT DISTINCT [stObject] FROM #temp [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string CopyJournalFunc {
            get {
                return ResourceManager.GetString("CopyJournalFunc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на CREATE DATABASE [{0}]
        ///GO
        ///
        ///USE [{0}]
        ///GO
        ///
        ///CREATE TABLE [dbo].[Users](
        ///	[inId] [int] IDENTITY(1,1) NOT NULL,
        ///	[stName] [varchar](255) NOT NULL,
        ///	CONSTRAINT [PK_Users] PRIMARY KEY CLUSTERED([inId] ASC)
        ///)
        ///
        ///CREATE UNIQUE INDEX [IX_Users_stName] ON [dbo].[Users]([stName] ASC)
        ///
        ///CREATE TABLE [dbo].[Objects](
        ///	[inId] [bigint] IDENTITY(1,1) NOT NULL,
        ///	[stName] [varchar](750) NOT NULL,
        ///	CONSTRAINT [PK_Objects] PRIMARY KEY CLUSTERED([inId] ASC)
        ///)
        ///
        ///CREATE UNIQUE INDEX [IX_Objects_stName] ON [dbo].[Obj [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string DatabaseStruct {
            get {
                return ResourceManager.GetString("DatabaseStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ALTER PROCEDURE [dbo].[MergeOperations]
        ///AS
        ///BEGIN
        ///	SET NOEXEC OFF;
        ///	MERGE INTO [dbo].[Operations] AS dst
        ///	USING [{1}].[dbo].[{3}] AS src
        ///	ON (dst.inId = src.inOpCode)
        ///	WHEN NOT MATCHED THEN
        ///	INSERT (inId, stName, stCommentRule, stProcedureName) 
        ///	VALUES (inOpCode, stDone, stComment_rule, stProcedure_name);
        ///	SET NOEXEC ON;
        ///	RETURN @@ROWCOUNT;
        ///END.
        /// </summary>
        internal static string MergeOperationsFunc {
            get {
                return ResourceManager.GetString("MergeOperationsFunc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ALTER PROCEDURE [dbo].[SearchFunc]
        ///(	
        ///	@rowCount BIGINT,
        ///	@startDate DATETIME = NULL,
        ///	@endDate DATETIME = NULL,
        ///	@userName VARCHAR(255) = NULL,
        ///	@objNames [dbo].[objNamesTable] READONLY,
        ///	@comment VARCHAR(750) = NULL,
        ///	@onlyArchive BIT = 0
        ///)
        ///AS BEGIN
        ///	IF (@userName IS NULL) SET @userName = &apos;&apos;;
        ///	IF (@comment IS NULL) SET @comment = &apos;&apos;;
        ///	SET @userName = &apos;%&apos; + @userName + &apos;%&apos;;
        ///	SET @comment = &apos;%&apos; + @comment + &apos;%&apos;;
        ///	DECLARE @B1 BIT;
        ///	SET @B1 = 0;
        ///	IF (@startDate IS NULL OR @endDate IS NULL) SE [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string SearchFunc {
            get {
                return ResourceManager.GetString("SearchFunc", resourceCulture);
            }
        }
    }
}
